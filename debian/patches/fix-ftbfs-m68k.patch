From: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
Subject: Fix FTBFS on m68k
Bug-Debian: https://bugs.debian.org/868126
Last-Update: 2020-01-23
Index: webkitgtk/Source/WTF/wtf/PlatformCPU.h
===================================================================
--- webkitgtk.orig/Source/WTF/wtf/PlatformCPU.h
+++ webkitgtk/Source/WTF/wtf/PlatformCPU.h
@@ -35,6 +35,11 @@
 /* ==== CPU() - the target CPU architecture ==== */
 /* CPU(KNOWN) becomes true if we explicitly support a target CPU. */
 
+/* CPU(M68K) - m68k */
+#if defined(__m68k__)
+#define WTF_CPU_BIG_ENDIAN 1
+#endif
+
 /* CPU(MIPS) - MIPS 32-bit and 64-bit */
 #if (defined(mips) || defined(__mips__) || defined(MIPS) || defined(_MIPS_) || defined(__mips64))
 #if defined(_ABI64) && (_MIPS_SIM == _ABI64)
Index: webkitgtk/Source/WebCore/css/CSSProperty.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/css/CSSProperty.cpp
+++ webkitgtk/Source/WebCore/css/CSSProperty.cpp
@@ -32,7 +32,9 @@ struct SameSizeAsCSSProperty {
     void* value;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(CSSProperty) == sizeof(SameSizeAsCSSProperty), "CSSProperty should stay small");
+#endif
 
 CSSPropertyID StylePropertyMetadata::shorthandID() const
 {
Index: webkitgtk/Source/WebCore/dom/ElementRareData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/ElementRareData.cpp
+++ webkitgtk/Source/WebCore/dom/ElementRareData.cpp
@@ -47,6 +47,8 @@ struct SameSizeAsElementRareData : NodeR
     ExplicitlySetAttrElementsMap explicitlySetAttrElementsMap;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(ElementRareData) == sizeof(SameSizeAsElementRareData), "ElementRareData should stay small");
+#endif
 
 } // namespace WebCore
Index: webkitgtk/Source/WebCore/dom/NodeRareData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/NodeRareData.cpp
+++ webkitgtk/Source/WebCore/dom/NodeRareData.cpp
@@ -41,7 +41,9 @@ struct SameSizeAsNodeRareData {
     bool m_isElementRareData;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(NodeRareData) == sizeof(SameSizeAsNodeRareData), "NodeRareData should stay small");
+#endif
 
 // Ensure the 10 bits reserved for the m_connectedFrameCount cannot overflow
 static_assert(Page::maxNumberOfFrames < 1024, "Frame limit should fit in rare data count");
Index: webkitgtk/Source/WebCore/dom/ShadowRoot.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/ShadowRoot.cpp
+++ webkitgtk/Source/WebCore/dom/ShadowRoot.cpp
@@ -58,10 +58,12 @@ struct SameSizeAsShadowRoot : public Doc
     std::optional<HashMap<AtomString, AtomString>> partMappings;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(ShadowRoot) == sizeof(SameSizeAsShadowRoot), "shadowroot should stay small");
 #if !ASSERT_ENABLED
 static_assert(sizeof(WeakPtr<Element, WeakPtrImplWithEventTargetData>) == sizeof(void*), "WeakPtr should be same size as raw pointer");
 #endif
+#endif
 
 ShadowRoot::ShadowRoot(Document& document, ShadowRootMode mode, SlotAssignmentMode assignmentMode, DelegatesFocus delegatesFocus, Cloneable cloneable, AvailableToElementInternals availableToElementInternals)
     : DocumentFragment(document, CreateShadowRoot)
Index: webkitgtk/Source/WebCore/rendering/style/RenderStyle.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/style/RenderStyle.cpp
+++ webkitgtk/Source/WebCore/rendering/style/RenderStyle.cpp
@@ -81,7 +81,9 @@ struct SameSizeAsBorderValue {
     int m_restBits;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(BorderValue) == sizeof(SameSizeAsBorderValue), "BorderValue should not grow");
+#endif
 
 struct SameSizeAsRenderStyle {
     void* nonInheritedDataRefs[1];
@@ -100,7 +102,9 @@ struct SameSizeAsRenderStyle {
 #endif
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(RenderStyle) == sizeof(SameSizeAsRenderStyle), "RenderStyle should stay small");
+#endif
 
 static_assert(PublicPseudoIDBits == static_cast<int>(PseudoId::FirstInternalPseudoId) - static_cast<int>(PseudoId::FirstPublicPseudoId));
 
Index: webkitgtk/Source/WebCore/rendering/style/StyleBoxData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/style/StyleBoxData.cpp
+++ webkitgtk/Source/WebCore/rendering/style/StyleBoxData.cpp
@@ -33,7 +33,9 @@ struct SameSizeAsStyleBoxData : public R
     uint32_t bitfields;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(StyleBoxData) == sizeof(SameSizeAsStyleBoxData), "StyleBoxData should not grow");
+#endif
 
 DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StyleBoxData);
 
Index: webkitgtk/Source/WebCore/platform/graphics/FontCascadeDescription.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/platform/graphics/FontCascadeDescription.cpp
+++ webkitgtk/Source/WebCore/platform/graphics/FontCascadeDescription.cpp
@@ -54,7 +54,9 @@ struct SameSizeAsFontCascadeDescription
     float size2;
     unsigned bitfields3 : 10;
 };
+#if !defined(__m68k__)
 static_assert(sizeof(FontCascadeDescription) == sizeof(SameSizeAsFontCascadeDescription), "FontCascadeDescription should stay small");
+#endif
 
 FontCascadeDescription::FontCascadeDescription()
     : m_families(RefCountedFixedVector<AtomString>::create(1))
Index: webkitgtk/Source/WebCore/style/RuleData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/style/RuleData.cpp
+++ webkitgtk/Source/WebCore/style/RuleData.cpp
@@ -57,7 +57,9 @@ struct SameSizeAsRuleData {
     unsigned d[4];
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(RuleData) == sizeof(SameSizeAsRuleData), "RuleData should stay small");
+#endif
 
 static inline MatchBasedOnRuleHash computeMatchBasedOnRuleHash(const CSSSelector& selector)
 {
Index: webkitgtk/Source/JavaScriptCore/bytecompiler/BytecodeGenerator.cpp
===================================================================
--- webkitgtk.orig/Source/JavaScriptCore/bytecompiler/BytecodeGenerator.cpp
+++ webkitgtk/Source/JavaScriptCore/bytecompiler/BytecodeGenerator.cpp
@@ -61,6 +61,11 @@
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/WTFString.h>
 
+#if defined(__m68k__) || defined(__SH4__)
+#pragma GCC push_options
+#pragma GCC optimize ("-O0")
+#endif
+
 namespace JSC {
 
 template<typename CallOp, typename = std::true_type>
@@ -5584,3 +5589,6 @@ void printInternal(PrintStream& out, JSC
 
 } // namespace WTF
 
+#if defined(__m68k__) || defined(__SH4__)
+#pragma GCC pop_options
+#endif
Index: webkitgtk/Source/WebCore/rendering/LegacyInlineFlowBox.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/LegacyInlineFlowBox.cpp
+++ webkitgtk/Source/WebCore/rendering/LegacyInlineFlowBox.cpp
@@ -60,7 +60,9 @@ struct SameSizeAsLegacyInlineFlowBox : p
     void* pointers[5];
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(LegacyInlineFlowBox) == sizeof(SameSizeAsLegacyInlineFlowBox), "LegacyInlineFlowBox should stay small");
+#endif
 
 #if !ASSERT_WITH_SECURITY_IMPLICATION_DISABLED
 
Index: webkitgtk/Source/WebCore/css/CSSValue.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/css/CSSValue.cpp
+++ webkitgtk/Source/WebCore/css/CSSValue.cpp
@@ -88,7 +88,9 @@ struct SameSizeAsCSSValue {
     uint32_t bitfields;
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(CSSValue) == sizeof(SameSizeAsCSSValue), "CSS value should stay small");
+#endif
 
 DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(CSSValue);
 
Index: webkitgtk/Source/WebCore/dom/Node.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/Node.cpp
+++ webkitgtk/Source/WebCore/dom/Node.cpp
@@ -122,7 +122,9 @@ struct SameSizeAsNode : public EventTarg
     uint8_t rareDataWithBitfields[8];
 };
 
+#if !defined(__m68k__)
 static_assert(sizeof(Node) == sizeof(SameSizeAsNode), "Node should stay small");
+#endif
 
 #if DUMP_NODE_STATISTICS
 static WeakHashSet<Node, WeakPtrImplWithEventTargetData>& liveNodeSet()
