From: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
Subject: Fix FTBFS on m68k
Bug-Debian: https://bugs.debian.org/868126
Last-Update: 2017-07-11
Index: webkitgtk/CMakeLists.txt
===================================================================
--- webkitgtk.orig/CMakeLists.txt
+++ webkitgtk/CMakeLists.txt
@@ -89,6 +89,8 @@ elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR
     set(WTF_CPU_ARM64 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "alpha*")
     set(WTF_CPU_ALPHA 1)
+elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "m68k")
+    set(WTF_CPU_M68K 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "^mips")
     set(WTF_CPU_MIPS 1)
 elseif (LOWERCASE_CMAKE_SYSTEM_PROCESSOR MATCHES "sh4")
Index: webkitgtk/Source/JavaScriptCore/CMakeLists.txt
===================================================================
--- webkitgtk.orig/Source/JavaScriptCore/CMakeLists.txt
+++ webkitgtk/Source/JavaScriptCore/CMakeLists.txt
@@ -1531,6 +1531,7 @@ elseif (WTF_CPU_PPC64)
 elseif (WTF_CPU_PPC64LE)
 elseif (WTF_CPU_S390)
 elseif (WTF_CPU_S390X)
+elseif (WTF_CPU_M68K)
 elseif (WTF_CPU_MIPS)
 elseif (WTF_CPU_SH4)
 elseif (WTF_CPU_SPARC64)
Index: webkitgtk/Source/WTF/wtf/Platform.h
===================================================================
--- webkitgtk.orig/Source/WTF/wtf/Platform.h
+++ webkitgtk/Source/WTF/wtf/Platform.h
@@ -80,6 +80,12 @@
 #endif
 #endif
 
+/* CPU(M68K) - m68k */
+#if defined(__m68k__)
+#define WTF_CPU_M68K 1
+#define WTF_CPU_BIG_ENDIAN 1
+#endif
+
 /* CPU(MIPS) - MIPS 32-bit and 64-bit */
 #if (defined(mips) || defined(__mips__) || defined(MIPS) || defined(_MIPS_) || defined(__mips64))
 #if defined(_ABI64) && (_MIPS_SIM == _ABI64)
@@ -927,7 +933,7 @@
 #define ENABLE_REGEXP_TRACING 0
 
 /* Yet Another Regex Runtime - turned on by default for JIT enabled ports. */
-#if !defined(ENABLE_YARR_JIT) && ENABLE(JIT)
+#if !defined(ENABLE_YARR_JIT) && ENABLE(JIT) && !CPU(M68K)
 #define ENABLE_YARR_JIT 1
 
 /* Setting this flag compares JIT results with interpreter results. */
Index: webkitgtk/Source/WTF/wtf/dtoa/utils.h
===================================================================
--- webkitgtk.orig/Source/WTF/wtf/dtoa/utils.h
+++ webkitgtk/Source/WTF/wtf/dtoa/utils.h
@@ -58,6 +58,8 @@ defined(_MIPS_ARCH_MIPS32R2)
 #else
 #undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
 #endif  // _WIN32
+#elif defined(__mc68000__)
+#undef DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
 #else
 #error Target architecture was not detected as supported by Double-Conversion.
 #endif
Index: webkitgtk/Source/WebCore/css/CSSProperty.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/css/CSSProperty.cpp
+++ webkitgtk/Source/WebCore/css/CSSProperty.cpp
@@ -33,7 +33,11 @@ struct SameSizeAsCSSProperty {
     void* value;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(CSSProperty) <= sizeof(SameSizeAsCSSProperty), CSSProperty_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(CSSProperty) == sizeof(SameSizeAsCSSProperty), CSSProperty_should_stay_small);
+#endif
 
 CSSPropertyID StylePropertyMetadata::shorthandID() const
 {
Index: webkitgtk/Source/WebCore/dom/ElementRareData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/ElementRareData.cpp
+++ webkitgtk/Source/WebCore/dom/ElementRareData.cpp
@@ -47,6 +47,10 @@ struct SameSizeAsElementRareData : NodeR
     void* pointers[8];
 };
 
+#if CPU(M68K)
+static_assert(sizeof(ElementRareData) <= sizeof(SameSizeAsElementRareData), "ElementRareData should stay small");
+#else
 static_assert(sizeof(ElementRareData) == sizeof(SameSizeAsElementRareData), "ElementRareData should stay small");
+#endif
 
 } // namespace WebCore
Index: webkitgtk/Source/WebCore/dom/NodeRareData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/NodeRareData.cpp
+++ webkitgtk/Source/WebCore/dom/NodeRareData.cpp
@@ -38,6 +38,10 @@ struct SameSizeAsNodeRareData {
     void* m_pointer[3];
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(NodeRareData) <= sizeof(SameSizeAsNodeRareData), NodeRareDataShouldStaySmall);
+#else
 COMPILE_ASSERT(sizeof(NodeRareData) == sizeof(SameSizeAsNodeRareData), NodeRareDataShouldStaySmall);
+#endif
 
 } // namespace WebCore
Index: webkitgtk/Source/WebCore/dom/ShadowRoot.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/dom/ShadowRoot.cpp
+++ webkitgtk/Source/WebCore/dom/ShadowRoot.cpp
@@ -47,7 +47,11 @@ struct SameSizeAsShadowRoot : public Doc
     void* slotAssignment;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(ShadowRoot) <= sizeof(SameSizeAsShadowRoot), shadowroot_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(ShadowRoot) == sizeof(SameSizeAsShadowRoot), shadowroot_should_stay_small);
+#endif
 
 ShadowRoot::ShadowRoot(Document& document, ShadowRootMode type)
     : DocumentFragment(document, CreateShadowRoot)
Index: webkitgtk/Source/WebCore/rendering/style/RenderStyle.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/style/RenderStyle.cpp
+++ webkitgtk/Source/WebCore/rendering/style/RenderStyle.cpp
@@ -63,7 +63,11 @@ struct SameSizeAsBorderValue {
     int m_restBits;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(BorderValue) <= sizeof(SameSizeAsBorderValue), BorderValue_should_not_grow);
+#else
 COMPILE_ASSERT(sizeof(BorderValue) == sizeof(SameSizeAsBorderValue), BorderValue_should_not_grow);
+#endif
 
 struct SameSizeAsRenderStyle {
     void* dataRefs[7];
Index: webkitgtk/Source/WebCore/rendering/style/StyleBoxData.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/rendering/style/StyleBoxData.cpp
+++ webkitgtk/Source/WebCore/rendering/style/StyleBoxData.cpp
@@ -33,7 +33,11 @@ struct SameSizeAsStyleBoxData : public R
     uint32_t bitfields;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(StyleBoxData) <= sizeof(SameSizeAsStyleBoxData), StyleBoxData_should_not_grow);
+#else
 COMPILE_ASSERT(sizeof(StyleBoxData) == sizeof(SameSizeAsStyleBoxData), StyleBoxData_should_not_grow);
+#endif
 
 StyleBoxData::StyleBoxData()
     : m_minWidth(RenderStyle::initialMinSize())
Index: webkitgtk/Source/WebCore/css/RuleSet.h
===================================================================
--- webkitgtk.orig/Source/WebCore/css/RuleSet.h
+++ webkitgtk/Source/WebCore/css/RuleSet.h
@@ -142,7 +142,11 @@ struct SameSizeAsRuleData {
     unsigned d[4];
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(RuleData) <= sizeof(SameSizeAsRuleData), RuleData_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(RuleData) == sizeof(SameSizeAsRuleData), RuleData_should_stay_small);
+#endif
 
 class RuleSet {
     WTF_MAKE_NONCOPYABLE(RuleSet); WTF_MAKE_FAST_ALLOCATED;
Index: webkitgtk/Source/WebCore/platform/graphics/FontDescription.cpp
===================================================================
--- webkitgtk.orig/Source/WebCore/platform/graphics/FontDescription.cpp
+++ webkitgtk/Source/WebCore/platform/graphics/FontDescription.cpp
@@ -52,7 +52,11 @@ struct SameSizeAsFontCascadeDescription
     unsigned bitfields3 : 10;
 };
 
+#if CPU(M68K)
+COMPILE_ASSERT(sizeof(FontCascadeDescription) <= sizeof(SameSizeAsFontCascadeDescription), FontCascadeDescription_should_stay_small);
+#else
 COMPILE_ASSERT(sizeof(FontCascadeDescription) == sizeof(SameSizeAsFontCascadeDescription), FontCascadeDescription_should_stay_small);
+#endif
 
 FontDescription::FontDescription()
     : m_fontSelectionRequest(FontCascadeDescription::initialWeight(), FontCascadeDescription::initialStretch(), FontCascadeDescription::initialItalic())
